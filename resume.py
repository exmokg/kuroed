import asyncio
import logging
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import CommandStart, Command
from aiogram.client.default import DefaultBotProperties
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from database.db_helper import (
    create_dbx,
    save_form,
    get_transferred_fullnames_by_period,
    is_user_blacklisted,
    update_status,
    get_form_by_user_id,
    search_by_fullname,
    search_by_phone,
    get_count_by_period,
    get_total_users,
    get_total_forms,
    get_total_rejected,
    get_total_transferred
)

API_TOKEN = '–¢–£–¢–¨_–¢–û–ö–ï–ù_–ë–û–¢–êA'
ADMIN_IDS = [–¢–£–¢–¨_ID_–ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê]  # –ú—É–ª—å—Ç–∏–∞–¥–º–∏–Ω—Å—Ç–≤–æ

logging.basicConfig(level=logging.DEBUG)

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

def get_admin_form_keyboard(user_id):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–µ—Ä–µ–¥–∞–Ω", callback_data=f"mark_transferred:{user_id}")],
        [InlineKeyboardButton(text="üóë –®–≤—ã—Ä—å", callback_data=f"mark_rejected:{user_id}")],
        [InlineKeyboardButton(text="‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_to_user:{user_id}")],
        [
            InlineKeyboardButton(text="üìÜ –ó–∞ –Ω–µ–¥–µ–ª—é", callback_data="summary_week"),
            InlineKeyboardButton(text="üìÖ –ó–∞ –º–µ—Å—è—Ü", callback_data="summary_month")
        ]
    ])
    return keyboard

def get_admin_control_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ –§–ò–û", callback_data="search_fullname")],
        [InlineKeyboardButton(text="üì± –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É", callback_data="search_phone")],
        [InlineKeyboardButton(text="üìÖ –°–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –∑–∞ –º–µ—Å—è—Ü", callback_data="list_transferred_month")],
        [InlineKeyboardButton(text="üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –∑–∞ –º–µ—Å—è—Ü", callback_data="count_transferred_month")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="statistics")]
    ])
    return keyboard

class Form(StatesGroup):
    citizenship = State()
    age = State()
    fullname = State()
    city = State()
    address = State()
    bad_habits = State()
    username = State()
    travel = State()
    license = State()
    phone = State()
    passport = State()
    experience = State()
    passport_front = State()
    passport_back = State()
    selfie = State()

class AdminSearch(StatesGroup):
    waiting_for_fullname = State()
    waiting_for_phone = State()
    waiting_for_reply = State()

async def send_to_admins(text, **kwargs):
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(admin_id, text, **kwargs)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")

async def send_photo_to_admins(photo, **kwargs):
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_photo(admin_id, photo, **kwargs)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

@dp.message(CommandStart())
async def start(message: types.Message, state: FSMContext):
    logging.debug(f"User ID: {message.from_user.id}")
    if message.from_user.id in ADMIN_IDS:
        await message.answer(
            "üë®‚Äçüíº –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_admin_control_keyboard()
        )
    else:
        # –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        await send_to_admins(
            f"üîî –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <a href='tg://user?id={message.from_user.id}'>{message.from_user.full_name}</a>\nID: <code>{message.from_user.id}</code>",
            parse_mode=ParseMode.HTML
        )
        if is_user_blacklisted(message.from_user.id):
            warn_text = f"‚ö†Ô∏è –≠—Ç–æ—Ç –ø–∏—Ç—É—Ö —Ä–∞–Ω–µ–µ –±—ã–ª –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –®–í–´–†–¨.\nID: <code>{message.from_user.id}</code>"
            await send_to_admins(warn_text)
            await message.answer("‚ö†Ô∏è –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ —Å –æ—Å–æ–±–æ–π —Ç—â–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é.")
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –Ω–∏–∂–µ.\n\n<b>0. –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ:</b>")
        await state.set_state(Form.citizenship)

@dp.message(Form.citizenship)
async def citizenship(message: types.Message, state: FSMContext):
    await state.update_data(citizenship=message.text)
    await message.answer("1. –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
    await state.set_state(Form.age)

@dp.message(Form.age)
async def age(message: types.Message, state: FSMContext):
    await state.update_data(age=message.text)
    await message.answer("2. –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
    await state.set_state(Form.fullname)

@dp.message(Form.fullname)
async def fullname(message: types.Message, state: FSMContext):
    await state.update_data(fullname=message.text)
    await message.answer("3. –ì–æ—Ä–æ–¥ / –ê–¥—Ä–µ—Å –ø—Ä–æ–ø–∏—Å–∫–∏:")
    await state.set_state(Form.city)

@dp.message(Form.city)
async def city(message: types.Message, state: FSMContext):
    await state.update_data(city=message.text)
    await message.answer("4. –ê–¥—Ä–µ—Å –≥–¥–µ –∂–∏–≤–µ—Ç–µ —Å–µ–π—á–∞—Å:")
    await state.set_state(Form.address)

@dp.message(Form.address)
async def address(message: types.Message, state: FSMContext):
    await state.update_data(address=message.text)
    await message.answer("5. –í—Ä–µ–¥–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏?")
    await state.set_state(Form.bad_habits)

@dp.message(Form.bad_habits)
async def habits(message: types.Message, state: FSMContext):
    await state.update_data(bad_habits=message.text)
    await message.answer("6. –í–∞—à username –≤ Telegram:")
    await state.set_state(Form.username)

@dp.message(Form.username)
async def username(message: types.Message, state: FSMContext):
    await state.update_data(username=message.text)
    await message.answer("7. –ì–æ—Ç–æ–≤—ã –ª–∏ –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å –≤ –†–§?")
    await state.set_state(Form.travel)

@dp.message(Form.travel)
async def travel(message: types.Message, state: FSMContext):
    await state.update_data(travel=message.text)
    await message.answer("8. –ù–∞–ª–∏—á–∏–µ –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø—Ä–∞–≤?")
    await state.set_state(Form.license)

@dp.message(Form.license)
async def license(message: types.Message, state: FSMContext):
    await state.update_data(license=message.text)
    await message.answer("9. –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(Form.phone)

@dp.message(Form.phone)
async def phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await message.answer("10. –ù–∞–ª–∏—á–∏–µ –∑–∞–≥—Ä–∞–Ω–ø–∞—Å–ø–æ—Ä—Ç–∞?")
    await state.set_state(Form.passport)

@dp.message(Form.passport)
async def passport(message: types.Message, state: FSMContext):
    await state.update_data(passport=message.text)
    await message.answer("11. –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:")
    await state.set_state(Form.experience)

@dp.message(Form.experience)
async def experience(message: types.Message, state: FSMContext):
    await state.update_data(experience=message.text)
    await message.answer("12. –§–æ—Ç–æ –ª–∏—Ü–µ–≤–æ–π —Å—Ç–æ—Ä–æ–Ω—ã –ø–∞—Å–ø–æ—Ä—Ç–∞:")
    await state.set_state(Form.passport_front)

@dp.message(Form.passport_front, F.photo)
async def front_photo(message: types.Message, state: FSMContext):
    await state.update_data(passport_front=message.photo[-1].file_id)
    data = await state.get_data()
    if "–∫–∏—Ä–≥–∏–∑" in data.get("citizenship", "").lower():
        await message.answer("13. –§–æ—Ç–æ –æ–±—Ä–∞—Ç–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã –ø–∞—Å–ø–æ—Ä—Ç–∞:")
        await state.set_state(Form.passport_back)
    else:
        await message.answer("14. –°–µ–ª—Ñ–∏ —Å –ø–∞—Å–ø–æ—Ä—Ç–æ–º:")
        await state.set_state(Form.selfie)

@dp.message(Form.passport_back, F.photo)
async def back_photo(message: types.Message, state: FSMContext):
    await state.update_data(passport_back=message.photo[-1].file_id)
    await message.answer("14. –°–µ–ª—Ñ–∏ —Å –ø–∞—Å–ø–æ—Ä—Ç–æ–º:")
    await state.set_state(Form.selfie)

@dp.message(Form.selfie, F.photo)
async def selfie_photo(message: types.Message, state: FSMContext):
    await state.update_data(selfie=message.photo[-1].file_id)
    data = await state.get_data()
    user_id = message.from_user.id

    fullname_link = f'<a href="tg://user?id={user_id}">{data["fullname"]}</a>'
    text = (
        "<b>üìã –ö—É—Ä–∞ –∑–∞–ø–æ–ª–Ω–∏–ª–∞ –∞–Ω–∫–µ—Ç—É:</b>\n\n"
        f"<b>–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ:</b> {data['citizenship']}\n"
        f"<b>–í–æ–∑—Ä–∞—Å—Ç:</b> {data['age']}\n"
        f"<b>–§–ò–û:</b> {fullname_link}\n"
        f"<b>–ü—Ä–æ–ø–∏—Å–∞–Ω:</b> {data['city']}\n"
        f"<b>–ü—Ä–æ–∂–∏–≤–∞–µ—Ç:</b> {data['address']}\n"
        f"<b>–ü—Ä–∏–≤—ã—á–∫–∏:</b> {data['bad_habits']}\n"
        f"<b>Username:</b> @{data['username']}\n"
        f"<b>–í–æ—Ä–∫–∞—Ç—å –≤ –†–§:</b> {data['travel']}\n"
        f"<b>–ü—Ä–∞–≤–∞:</b> {data['license']}\n"
        f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {data['phone']}\n"
        f"<b>–ó–∞–≥—Ä–∞–Ω–ø–∞—Å–ø–æ—Ä—Ç:</b> {data['passport']}\n"
        f"<b>–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:</b> {data['experience']}\n"
    )

    if len(text) > 4000:
        text = f"<b>üìã –ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞:</b>\n\n<b>–§–ò–û:</b> {fullname_link}\n<b>User ID:</b> {user_id}"

    keyboard = get_admin_form_keyboard(user_id)
    await send_to_admins(text, reply_markup=keyboard, parse_mode=ParseMode.HTML)

    await send_photo_to_admins(data['passport_front'], caption="üìÑ –õ–∏—Ü–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ –ø–∞—Å–ø–æ—Ä—Ç–∞")
    if 'passport_back' in data:
        await send_photo_to_admins(data['passport_back'], caption="üìÑ –û–±—Ä–∞—Ç–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ –ø–∞—Å–ø–æ—Ä—Ç–∞")
    await send_photo_to_admins(data['selfie'], caption="ü§≥ –°–µ–ª—Ñ–∏ —Å –ø–∞—Å–ø–æ—Ä—Ç–æ–º")

    try:
        save_form(data, user_id=user_id)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –≤ –ë–î: {e}")

    await message.answer("‚úÖ –ê–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –°–∫–æ—Ä–æ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏!")
    await state.clear()

@dp.callback_query()
async def handle_admin_buttons(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –∫–Ω–æ–ø–∫–∏.", show_alert=True)
        return

    try:
        if callback.data.startswith("mark_transferred:"):
            form_user_id = int(callback.data.split(":")[1])
            update_status(form_user_id, "–ø–µ—Ä–µ–¥–∞–Ω")
            await callback.answer("üì¶ –û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ")
            form_data = get_form_by_user_id(form_user_id)
            if form_data:
                status_text = (
                    f"<b>üìã –ê–Ω–∫–µ—Ç–∞ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –ü–ï–†–ï–î–ê–ù:</b>\n\n"
                    f"<b>–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ:</b> {form_data.get('citizenship', 'N/A')}\n"
                    f"<b>–í–æ–∑—Ä–∞—Å—Ç:</b> {form_data.get('age', 'N/A')}\n"
                    f"<b>–§–ò–û:</b> <a href=\"tg://user?id={form_user_id}\">{form_data.get('fullname', 'N/A')}</a>\n"
                    f"<b>–ü—Ä–æ–ø–∏—Å–∫–∞:</b> {form_data.get('city', 'N/A')}\n"
                    f"<b>–ü—Ä–æ–∂–∏–≤–∞–Ω–∏–µ:</b> {form_data.get('address', 'N/A')}\n"
                    f"<b>–ü—Ä–∏–≤—ã—á–∫–∏:</b> {form_data.get('bad_habits', 'N/A')}\n"
                    f"<b>Username:</b> @{form_data.get('username', 'N/A')}\n"
                    f"<b>–ö–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∏ –≤ –†–§:</b> {form_data.get('travel', 'N/A')}\n"
                    f"<b>–ü—Ä–∞–≤–∞:</b> {form_data.get('license', 'N/A')}\n"
                    f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {form_data.get('phone', 'N/A')}\n"
                    f"<b>–ó–∞–≥—Ä–∞–Ω–ø–∞—Å–ø–æ—Ä—Ç:</b> {form_data.get('passport', 'N/A')}\n"
                    f"<b>–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:</b> {form_data.get('experience', 'N/A')}"
                )
                await send_to_admins(status_text, parse_mode=ParseMode.HTML)
                if form_data.get('passport_front'):
                    await send_photo_to_admins(form_data['passport_front'], caption="üìÑ –õ–∏—Ü–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ –ø–∞—Å–ø–æ—Ä—Ç–∞")
                if form_data.get('passport_back') and form_data.get('passport_back') != 'N/A':
                    await send_photo_to_admins(form_data['passport_back'], caption="üìÑ –û–±—Ä–∞—Ç–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ –ø–∞—Å–ø–æ—Ä—Ç–∞")
                if form_data.get('selfie'):
                    await send_photo_to_admins(form_data['selfie'], caption="ü§≥ –°–µ–ª—Ñ–∏ —Å –ø–∞—Å–ø–æ—Ä—Ç–æ–º")
            else:
                await send_to_admins(f"‚ö†Ô∏è –ê–Ω–∫–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {form_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

        elif callback.data.startswith("mark_rejected:"):
            form_user_id = int(callback.data.split(":")[1])
            update_status(form_user_id, "—à–≤—ã—Ä—å")
            await callback.answer("üóë –û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ —à–≤—ã—Ä—å")
            form_data = get_form_by_user_id(form_user_id)
            if form_data:
                status_text = (
                    f"<b>üìã –ê–Ω–∫–µ—Ç–∞ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –®–í–´–†–¨:</b>\n\n"
                    f"<b>–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ:</b> {form_data.get('citizenship', 'N/A')}\n"
                    f"<b>–í–æ–∑—Ä–∞—Å—Ç:</b> {form_data.get('age', 'N/A')}\n"
                    f"<b>–§–ò–û:</b> <a href=\"tg://user?id={form_user_id}\">{form_data.get('fullname', 'N/A')}</a>\n"
                    f"<b>–ü—Ä–æ–ø–∏—Å–∫–∞:</b> {form_data.get('city', 'N/A')}\n"
                    f"<b>–ü—Ä–æ–∂–∏–≤–∞–Ω–∏–µ:</b> {form_data.get('address', 'N/A')}\n"
                    f"<b>–ü—Ä–∏–≤—ã—á–∫–∏:</b> {form_data.get('bad_habits', 'N/A')}\n"
                    f"<b>Username:</b> @{form_data.get('username', 'N/A')}\n"
                    f"<b>–ö–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∏ –≤ –†–§:</b> {form_data.get('travel', 'N/A')}\n"
                    f"<b>–ü—Ä–∞–≤–∞:</b> {form_data.get('license', 'N/A')}\n"
                    f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {form_data.get('phone', 'N/A')}\n"
                    f"<b>–ó–∞–≥—Ä–∞–Ω–ø–∞—Å–ø–æ—Ä—Ç:</b> {form_data.get('passport', 'N/A')}\n"
                    f"<b>–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:</b> {form_data.get('experience', 'N/A')}"
                )
                await send_to_admins(status_text, parse_mode=ParseMode.HTML)
                if form_data.get('passport_front'):
                    await send_photo_to_admins(form_data['passport_front'], caption="üìÑ –õ–∏—Ü–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ –ø–∞—Å–ø–æ—Ä—Ç–∞")
                if form_data.get('passport_back') and form_data.get('passport_back') != 'N/A':
                    await send_photo_to_admins(form_data['passport_back'], caption="üìÑ –û–±—Ä–∞—Ç–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ –ø–∞—Å–ø–æ—Ä—Ç–∞")
                if form_data.get('selfie'):
                    await send_photo_to_admins(form_data['selfie'], caption="ü§≥ –°–µ–ª—Ñ–∏ —Å –ø–∞—Å–ø–æ—Ä—Ç–æ–º")
            else:
                await send_to_admins(f"‚ö†Ô∏è –ê–Ω–∫–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {form_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

        elif callback.data.startswith("reply_to_user:"):
            form_user_id = int(callback.data.split(":")[1])
            await state.update_data(reply_user_id=form_user_id)
            await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
            await state.set_state(AdminSearch.waiting_for_reply)
            await callback.answer()

        elif callback.data == "summary_week":
            fullnames = get_transferred_fullnames_by_period(days=7)
            if fullnames:
                text = "üìÖ –ü–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –∑–∞ –Ω–µ–¥–µ–ª—é:\n" + "\n".join(f"- {item['fullname']} ({item['created_at']})" for item in fullnames)
            else:
                text = "‚ö†Ô∏è –ó–∞ –Ω–µ–¥–µ–ª—é –Ω–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç."
            await bot.send_message(callback.from_user.id, text)
            await callback.answer("‚úÖ –°–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

        elif callback.data == "summary_month":
            fullnames = get_transferred_fullnames_by_period(days=30)
            if fullnames:
                text = "üìÖ –ü–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –∑–∞ –º–µ—Å—è—Ü:\n" + "\n".join(f"- {item['fullname']} ({item['created_at']})" for item in fullnames)
            else:
                text = "‚ö†Ô∏è –ó–∞ –º–µ—Å—è—Ü –Ω–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç."
            await bot.send_message(callback.from_user.id, text)
            await callback.answer("‚úÖ –°–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

        elif callback.data == "list_transferred_month":
            fullnames = get_transferred_fullnames_by_period(days=30)
            if fullnames:
                text = "üìÖ –ü–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –∑–∞ –º–µ—Å—è—Ü:\n" + "\n".join(f"- {item['fullname']} ({item['created_at']})" for item in fullnames)
            else:
                text = "‚ö†Ô∏è –ó–∞ –º–µ—Å—è—Ü –Ω–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç."
            await bot.send_message(callback.from_user.id, text)
            await callback.answer("‚úÖ –°–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

        elif callback.data == "count_transferred_month":
            count = get_count_by_period(days=30)
            text = f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –∞–Ω–∫–µ—Ç –∑–∞ –º–µ—Å—è—Ü: {count}"
            await bot.send_message(callback.from_user.id, text)
            await callback.answer("‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

        elif callback.data == "statistics":
            total_users = get_total_users()
            total_forms = get_total_forms()
            total_rejected = get_total_rejected()
            total_transferred = get_total_transferred()
            text = (f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
                    f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{total_users}</b>\n"
                    f"üìã –ó–∞–ø–æ–ª–Ω–µ–Ω–æ –∞–Ω–∫–µ—Ç: <b>{total_forms}</b>\n"
                    f"üóë –®–≤—ã—Ä–µ–π: <b>{total_rejected}</b>\n"
                    f"‚úÖ –ü–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö: <b>{total_transferred}</b>")
            await bot.send_message(callback.from_user.id, text, parse_mode=ParseMode.HTML)
            await callback.answer()

        elif callback.data == "search_fullname":
            await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –¥–ª—è –ø–æ–∏—Å–∫–∞:")
            await state.set_state(AdminSearch.waiting_for_fullname)
            await callback.answer()

        elif callback.data == "search_phone":
            await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
            await state.set_state(AdminSearch.waiting_for_phone)
            await callback.answer()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ callback: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ.", show_alert=True)

@dp.message(AdminSearch.waiting_for_reply)
async def admin_reply_to_user(message: types.Message, state: FSMContext):
    data = await state.get_data()
    user_id = data.get("reply_user_id")
    if user_id:
        try:
            await bot.send_message(user_id, f"üí¨ –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{message.text}")
            await send_to_admins(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {user_id}")
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞.")
    await state.clear()

@dp.message(AdminSearch.waiting_for_fullname)
async def process_search_fullname(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø–æ–∏—Å–∫.")
        return
    fullname = message.text.strip()
    try:
        results = search_by_fullname(fullname)
        if not results:
            await message.answer(f"‚ö†Ô∏è –ê–Ω–∫–µ—Ç—ã —Å –§–ò–û '{fullname}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        else:
            for form in results:
                text = (
                    f"<b>üìã –ê–Ω–∫–µ—Ç–∞:</b>\n\n"
                    f"<b>–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ:</b> {form.get('citizenship', 'N/A')}\n"
                    f"<b>–í–æ–∑—Ä–∞—Å—Ç:</b> {form.get('age', 'N/A')}\n"
                    f"<b>–§–ò–û:</b> <a href='tg://user?id={form.get('user_id', '')}'>{form.get('fullname', 'N/A')}</a>\n"
                    f"<b>–ü—Ä–æ–ø–∏—Å–∫–∞:</b> {form.get('city', 'N/A')}\n"
                    f"<b>–ü—Ä–æ–∂–∏–≤–∞–Ω–∏–µ:</b> {form.get('address', 'N/A')}\n"
                    f"<b>–ü—Ä–∏–≤—ã—á–∫–∏:</b> {form.get('bad_habits', 'N/A')}\n"
                    f"<b>Username:</b> @{form.get('username', 'N/A')}\n"
                    f"<b>–ö–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∏ –≤ –†–§:</b> {form.get('travel', 'N/A')}\n"
                    f"<b>–ü—Ä–∞–≤–∞:</b> {form.get('license', 'N/A')}\n"
                    f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {form.get('phone', 'N/A')}\n"
                    f"<b>–ó–∞–≥—Ä–∞–Ω–ø–∞—Å–ø–æ—Ä—Ç:</b> {form.get('passport', 'N/A')}\n"
                    f"<b>–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:</b> {form.get('experience', 'N/A')}\n"
                    f"<b>–°—Ç–∞—Ç—É—Å:</b> {form.get('status', 'N/A')}\n"
                    f"<b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</b> {form.get('created_at', 'N/A')}\n"
                )
                await message.answer(text, parse_mode=ParseMode.HTML)
                if form.get('passport_front'):
                    await bot.send_photo(message.from_user.id, form['passport_front'], caption="üìÑ –õ–∏—Ü–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ –ø–∞—Å–ø–æ—Ä—Ç–∞")
                if form.get('passport_back') and form.get('passport_back') != 'N/A':
                    await bot.send_photo(message.from_user.id, form['passport_back'], caption="üìÑ –û–±—Ä–∞—Ç–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ –ø–∞—Å–ø–æ—Ä—Ç–∞")
                if form.get('selfie'):
                    await bot.send_photo(message.from_user.id, form['selfie'], caption="ü§≥ –°–µ–ª—Ñ–∏ —Å –ø–∞—Å–ø–æ—Ä—Ç–æ–º")
        await state.clear()
    except Exception as e:
        logging.error(f"Error searching by fullname: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()

@dp.message(AdminSearch.waiting_for_phone)
async def process_search_phone(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø–æ–∏—Å–∫.")
        return
    phone = message.text.strip()
    try:
        results = search_by_phone(phone)
        if not results:
            await message.answer(f"‚ö†Ô∏è –ê–Ω–∫–µ—Ç—ã —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ '{phone}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        else:
            for form in results:
                text = (
                    f"<b>üìã –ê–Ω–∫–µ—Ç–∞:</b>\n\n"
                    f"<b>–ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ:</b> {form.get('citizenship', 'N/A')}\n"
                    f"<b>–í–æ–∑—Ä–∞—Å—Ç:</b> {form.get('age', 'N/A')}\n"
                    f"<b>–§–ò–û:</b> <a href='tg://user?id={form.get('user_id', '')}'>{form.get('fullname', 'N/A')}</a>\n"
                    f"<b>–ü—Ä–æ–ø–∏—Å–∫–∞:</b> {form.get('city', 'N/A')}\n"
                    f"<b>–ü—Ä–æ–∂–∏–≤–∞–Ω–∏–µ:</b> {form.get('address', 'N/A')}\n"
                    f"<b>–ü—Ä–∏–≤—ã—á–∫–∏:</b> {form.get('bad_habits', 'N/A')}\n"
                    f"<b>Username:</b> @{form.get('username', 'N/A')}\n"
                    f"<b>–ö–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∏ –≤ –†–§:</b> {form.get('travel', 'N/A')}\n"
                    f"<b>–ü—Ä–∞–≤–∞:</b> {form.get('license', 'N/A')}\n"
                    f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {form.get('phone', 'N/A')}\n"
                    f"<b>–ó–∞–≥—Ä–∞–Ω–ø–∞—Å–ø–æ—Ä—Ç:</b> {form.get('passport', 'N/A')}\n"
                    f"<b>–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:</b> {form.get('experience', 'N/A')}\n"
                    f"<b>–°—Ç–∞—Ç—É—Å:</b> {form.get('status', 'N/A')}\n"
                    f"<b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</b> {form.get('created_at', 'N/A')}\n"
                )
                await message.answer(text, parse_mode=ParseMode.HTML)
                if form.get('passport_front'):
                    await bot.send_photo(message.from_user.id, form['passport_front'], caption="üìÑ –õ–∏—Ü–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ –ø–∞—Å–ø–æ—Ä—Ç–∞")
                if form.get('passport_back') and form.get('passport_back') != 'N/A':
                    await bot.send_photo(message.from_user.id, form['passport_back'], caption="üìÑ –û–±—Ä–∞—Ç–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ –ø–∞—Å–ø–æ—Ä—Ç–∞")
                if form.get('selfie'):
                    await bot.send_photo(message.from_user.id, form['selfie'], caption="ü§≥ –°–µ–ª—Ñ–∏ —Å –ø–∞—Å–ø–æ—Ä—Ç–æ–º")
        await state.clear()
    except Exception as e:
        logging.error(f"Error searching by phone: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()

async def main():
    try:
        create_dbx()
        logging.debug("Database initialized")
        await dp.start_polling(bot)
    except Exception as e:
        logging.error(f"Error in main loop: {e}")

if __name__ == "__main__":
    asyncio.run(main())